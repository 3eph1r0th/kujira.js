/**
 * This file was automatically generated by cosmwasm-typescript-gen@0.3.6.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the cosmwasm-typescript-gen generate command to regenerate this file.
 */
import { CosmWasmClient, ExecuteResult, SigningCosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
export declare type Denom = {
    native: string;
} | {
    cw20: Addr;
};
export declare type Addr = string;
export declare type Decimal = string;
export declare type Uint128 = string;
export interface BookResponse {
    base: PoolResponse[];
    quote: PoolResponse[];
    [k: string]: unknown;
}
export interface PoolResponse {
    offer_denom: Denom;
    quote_price: Decimal;
    total_offer_amount: Uint128;
    [k: string]: unknown;
}
export declare type Precision = {
    significant_figures: number;
} | {
    decimal_places: number;
};
export interface ConfigResponse {
    denoms: [Denom, Denom];
    is_bootstrapping: boolean;
    owner: Addr;
    price_precision: Precision;
    [k: string]: unknown;
}
export declare type ExecuteMsg = {
    receive: Cw20ReceiveMsg;
} | {
    launch: {
        [k: string]: unknown;
    };
} | {
    update_config: {
        owner?: Addr | null;
        price_precision?: Precision | null;
        [k: string]: unknown;
    };
} | {
    submit_order: {
        price: Decimal;
        [k: string]: unknown;
    };
} | {
    swap: {
        belief_price?: Decimal | null;
        max_spread?: Decimal | null;
        offer_asset?: Coin | null;
        to?: Addr | null;
        [k: string]: unknown;
    };
} | {
    retract_order: {
        amount?: Uint128 | null;
        order_idx: Uint128;
        [k: string]: unknown;
    };
} | {
    retract_orders: {
        order_idxs: Uint128[];
        [k: string]: unknown;
    };
} | {
    withdraw_orders: {
        order_idxs?: Uint128[] | null;
        [k: string]: unknown;
    };
};
export declare type Binary = string;
export interface Cw20ReceiveMsg {
    amount: Uint128;
    msg: Binary;
    sender: string;
    [k: string]: unknown;
}
export interface Coin {
    amount: Uint128;
    denom: string;
    [k: string]: unknown;
}
export interface InstantiateMsg {
    denoms: [Denom, Denom];
    owner: Addr;
    price_precision: Precision;
    [k: string]: unknown;
}
export declare type Timestamp = Uint64;
export declare type Uint64 = string;
export interface OrderResponse {
    created_at: Timestamp;
    filled_amount: Uint128;
    idx: Uint128;
    offer_amount: Uint128;
    offer_denom: Denom;
    original_offer_amount: Uint128;
    owner: Addr;
    quote_price: Decimal;
    [k: string]: unknown;
}
export interface OrdersResponse {
    orders: OrderResponse[];
    [k: string]: unknown;
}
export interface PriceResponse {
    pools: [PoolResponse, PoolResponse];
    [k: string]: unknown;
}
export declare type QueryMsg = {
    config: {
        [k: string]: unknown;
    };
} | {
    simulation: {
        offer_asset: Asset;
        [k: string]: unknown;
    };
} | {
    order: {
        order_idx: Uint128;
        [k: string]: unknown;
    };
} | {
    orders_by_user: {
        address: Addr;
        limit?: number | null;
        start_after?: Uint128 | null;
        [k: string]: unknown;
    };
} | {
    price: {
        price: Decimal;
        [k: string]: unknown;
    };
} | {
    book: {
        limit?: number | null;
        offset?: number | null;
        [k: string]: unknown;
    };
};
export declare type AssetInfo = {
    token: {
        contract_addr: string;
        [k: string]: unknown;
    };
} | {
    native_token: {
        denom: string;
        [k: string]: unknown;
    };
};
export interface Asset {
    amount: Uint128;
    info: AssetInfo;
    [k: string]: unknown;
}
export interface SimulationResponse {
    commission_amount: Uint128;
    return_amount: Uint128;
    spread_amount: Uint128;
    [k: string]: unknown;
}
export interface FinReadOnlyInterface {
    contractAddress: string;
    config: () => Promise<ConfigResponse>;
    simulation: ({ offerAsset, }: {
        offerAsset: Asset;
    }) => Promise<SimulationResponse>;
    order: ({ orderIdx }: {
        orderIdx: string;
    }) => Promise<OrderResponse>;
    ordersByUser: ({ address, limit, startAfter, }: {
        address: string;
        limit?: number;
        startAfter?: Uint128;
    }) => Promise<OrdersResponse>;
    price: ({ price }: {
        price: string;
    }) => Promise<PriceResponse>;
    book: ({ limit, offset, }: {
        limit?: number;
        offset?: number;
    }) => Promise<BookResponse>;
}
export declare class FinQueryClient implements FinReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    config: () => Promise<ConfigResponse>;
    simulation: ({ offerAsset, }: {
        offerAsset: Asset;
    }) => Promise<SimulationResponse>;
    order: ({ orderIdx, }: {
        orderIdx: string;
    }) => Promise<OrderResponse>;
    ordersByUser: ({ address, limit, startAfter, }: {
        address: string;
        limit?: number | undefined;
        startAfter?: string | undefined;
    }) => Promise<OrdersResponse>;
    price: ({ price }: {
        price: string;
    }) => Promise<PriceResponse>;
    book: ({ limit, offset, }: {
        limit?: number | undefined;
        offset?: number | undefined;
    }) => Promise<BookResponse>;
}
export interface FinInterface extends FinReadOnlyInterface {
    contractAddress: string;
    sender: string;
    receive: ({ amount, msg, sender, }: {
        amount: string;
        msg: string;
        sender: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    launch: (fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    updateConfig: ({ owner, pricePrecision, }: {
        owner?: Addr;
        pricePrecision?: Precision;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    submitOrder: ({ price, }: {
        price: Decimal;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    swap: ({ beliefPrice, maxSpread, offerAsset, to, }: {
        beliefPrice?: Decimal;
        maxSpread?: Decimal;
        offerAsset?: Coin;
        to?: Addr;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    retractOrder: ({ amount, orderIdx, }: {
        amount?: Uint128;
        orderIdx: Uint128;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    retractOrders: ({ orderIdxs, }: {
        orderIdxs: Uint128[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    withdrawOrders: ({ orderIdxs, }: {
        orderIdxs?: string[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
}
export declare class FinClient extends FinQueryClient implements FinInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    receive: ({ amount, msg, sender, }: {
        amount: string;
        msg: string;
        sender: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    launch: (fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    updateConfig: ({ owner, pricePrecision, }: {
        owner?: string | undefined;
        pricePrecision?: Precision | undefined;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    submitOrder: ({ price, }: {
        price: Decimal;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    swap: ({ beliefPrice, maxSpread, offerAsset, to, }: {
        beliefPrice?: string | undefined;
        maxSpread?: string | undefined;
        offerAsset?: Coin | undefined;
        to?: string | undefined;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    retractOrder: ({ amount, orderIdx, }: {
        amount?: string | undefined;
        orderIdx: Uint128;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    retractOrders: ({ orderIdxs, }: {
        orderIdxs: Uint128[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    withdrawOrders: ({ orderIdxs, }: {
        orderIdxs?: string[] | undefined;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
}
